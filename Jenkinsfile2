def is_valid_ip(ip) {

    return ip =~ /^(\d{1,3}\.){3}\d{1,3}$/
}

node {
    try {
  
 def userInput = input(
    id: 'userInput',
    message: 'Enter the private IP address of the EC2 instance:',
    parameters: [
        string(defaultValue: 'None', description: 'Private ip address', name: 'IP_address')
    ]
)


def PRIVATE_IP =userInput



        if (!is_valid_ip(PRIVATE_IP)) {
            error "Invalid IP address format. Please enter a valid private IP address."
        }

     
        stage('Find EC2 Instance') {
            try {
                def INSTANCE_ID = sh(
                    script: "aws ec2 describe-instances --filters \"Name=private-ip-address,Values=${PRIVATE_IP}\" --query 'Reservations[0].Instances[0].InstanceId' --output text",
                    returnStdout: true
                ).trim()

                if (INSTANCE_ID.isEmpty()) {
                    error "No EC2 instance found with the provided private IP address: ${PRIVATE_IP}"
                }

                echo "Found instance with private IP ${PRIVATE_IP} and ID: ${INSTANCE_ID}"
                currentBuild.description = "Found EC2 instance: ${INSTANCE_ID}"

                def choiceInput = input(
                    id: 'choiceInput',
                    message: 'Choose an option:',
                    parameters: [
                        [$class: 'ChoiceParameterDefinition',
                         name: 'Option',
                         description: 'Select an option:',
                         choices: ['y', 'n'],
                         defaultValue: 'n']
                    ]
                )

                if (choiceInput == 'n') {
                    echo "Termination canceled."
                    currentBuild.result = 'ABORTED'
                    error 'Termination canceled.'
                }

                
                stage('Terminate EC2 Instance') {
                    try {
                        sh "aws ec2 terminate-instances --instance-ids ${INSTANCE_ID}"
                        echo "Terminating instance ${INSTANCE_ID}..."
                    } catch (Exception e) {
                        error "Failed to terminate EC2 instance: ${e.message}"
                    }
                }

                S
                stage('Wait for Termination') {
                    try {
                        sh "aws ec2 wait instance-terminated --instance-ids ${INSTANCE_ID}"
                        echo "Instance ${INSTANCE_ID} has been terminated."
                    } catch (Exception e) {
                        error "Failed to wait for EC2 instance termination: ${e.message}"
                    }
                }
            } catch (Exception e) {
                currentBuild.result = 'FAILURE'
                echo "Pipeline failed: ${e.message}"
            }
        }
    } catch (Exception e) {
        currentBuild.result = 'FAILURE'
        echo "Pipeline failed: ${e.message}"
    }
}
