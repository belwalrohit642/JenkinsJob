def is_valid_ip(ip) {
    return ip =~ /^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$/
}

node {
    def PRIVATE_IP

    try {
        // Input step to get the private IP address
        userInput = input(
    id: 'userInput',
    message: 'Enter the private IP address of the EC2 instance:',
    parameters: [
        [$class: 'TextParameterDefinition', defaultValue: 'None', description: 'Private Ip address:', name: 'IP_address']
    ]
)

// Access the 'IP_address' parameter correctly
PRIVATE_IP = userInput

        // Validate IP Address
        if (!is_valid_ip(PRIVATE_IP)) {
            error "Invalid IP address format. Please enter a valid private IP address."
        }

        // Find EC2 Instance
        stage('Find EC2 Instance') {    
            try {
                INSTANCE_ID = sh(
    script: "aws ec2 describe-instances --filters \"Name=private-ip-address,Values=${PRIVATE_IP}\" --query 'Reservations[0].Instances[0].InstanceId' --output text",
    returnStdout: true
).trim()


                if (INSTANCE_ID.isEmpty()) {
                    error "No EC2 instance found with the provided private IP address: ${PRIVATE_IP}"
                }

                echo "Found instance with private IP ${PRIVATE_IP} and ID: ${INSTANCE_ID}"
                currentBuild.description = "Found EC2 instance: ${INSTANCE_ID}"
            } catch (Exception e) {
                error "Failed to find EC2 instance: ${e.message}"
            }
        }
stage('Confirm Termination') {
    steps {
     userInput2= input(
            id: 'userInput2'
            message: 'Do you want to terminate this instance? (y/n):',
                        parameters: [
                            choice(
                                choices: 'Y\nN',
                                description: 'Choose Y for Yes or N for No',
                                name: 'CONTINUE'
                            )
                        ]
        )

        script {
            if (userInput2 == 'n') {
                echo "Termination canceled."
                currentBuild.result = 'ABORTED'
                error 'Termination canceled.'
            }
        }
    }
}

        // Terminate EC2 Instance
        stage('Terminate EC2 Instance') {
            try {
                sh "aws ec2 terminate-instances --instance-ids ${INSTANCE_ID}"
                echo "Terminating instance ${INSTANCE_ID}..."
            } catch (Exception e) {
                error "Failed to terminate EC2 instance: ${e.message}"
            }
        }

        // Wait for Termination
        stage('Wait for Termination') {
            try {
                sh "aws ec2 wait instance-terminated --instance-ids ${INSTANCE_ID}"
                echo "Instance ${INSTANCE_ID} has been terminated."
            } catch (Exception e) {
                error "Failed to wait for EC2 instance termination: ${e.message}"
            }
        }
    } catch (Exception e) {
        currentBuild.result = 'FAILURE'
        echo "Pipeline failed: ${e.message}"
    }
}
